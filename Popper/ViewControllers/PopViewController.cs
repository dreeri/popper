// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Facebook.Pop;
using Foundation;
using Popper.Utilities;
using UIKit;

namespace Popper
{
    public partial class PopViewController : UIViewController
    {
        enum BoxLocation
        {
            NorthEast,
            SouthEast,
            SouthWest,
            NorthWest
        }

        float SizeX;
        float SizeY;
        float DynamicsMass;
        float DynamicsTension;
        float DynamicsFriction;

        BoxLocation Location;

        public PopViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitButtons();
            GetUserDefaults();
            InitBox();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            GetUserDefaults();
        }

        void GetUserDefaults()
        {
            SizeX = NSUserDefaults.StandardUserDefaults.FloatForKey("slider1");
            SizeY = NSUserDefaults.StandardUserDefaults.FloatForKey("slider2");
            DynamicsMass = NSUserDefaults.StandardUserDefaults.FloatForKey("slider3");
            DynamicsTension = NSUserDefaults.StandardUserDefaults.FloatForKey("slider4");
            DynamicsFriction = NSUserDefaults.StandardUserDefaults.FloatForKey("slider5");

            var minimumSize = 60f;
            SizeX = SizeX < minimumSize ? minimumSize : SizeX;
            SizeY = SizeY < minimumSize ? minimumSize : SizeY;
            var minimumDynamicValue = 1f;

            DynamicsMass = DynamicsMass < minimumDynamicValue ? Constants.DefaultPopDynamicsMass : DynamicsMass;
            DynamicsTension = DynamicsTension < minimumDynamicValue ? Constants.DefaultPopDynamicsTension : DynamicsTension;
            DynamicsFriction = DynamicsFriction < minimumDynamicValue ? Constants.DefaultPopDynamicsFriction : DynamicsFriction;
        }

        CGPoint CalculateBoxLocation()
        {
            var screenWidth = UIScreen.MainScreen.Bounds.Width;
            var screenHeight = UIScreen.MainScreen.Bounds.Height;

            var statusBarHeight = 20f;
            var halfWidth = SizeX / 2;
            var halfHeight = SizeY / 2;
            var tabBarHeight = TabBarController?.TabBar.Bounds.Size.Height ?? 59f;
            switch (Location)
            {
                case BoxLocation.NorthEast:
                    return new CGPoint(screenWidth - halfWidth, halfHeight + statusBarHeight);
                case BoxLocation.SouthEast:
                    return new CGPoint(screenWidth - halfWidth, screenHeight - halfHeight - tabBarHeight);
                case BoxLocation.SouthWest:
                    return new CGPoint(halfWidth, screenHeight - halfHeight - tabBarHeight);
                case BoxLocation.NorthWest:
                    return new CGPoint(halfWidth, halfHeight + statusBarHeight);
                default:
                    return new CGPoint(0, 0);
            }
        }

        void BoxLocationAnimation()
        {
            var animationSize = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerBounds);
            var size = new CGSize(SizeX, SizeY);
            animationSize.ToValue = NSValue.FromCGRect(new CGRect(new CGPoint(0, 0), size));
            animationSize.DynamicsMass = DynamicsMass;
            animationSize.DynamicsTension = DynamicsTension;
            animationSize.DynamicsFriction = DynamicsFriction;
            animationView.Layer.AddAnimation(animationSize, "size");

            var animation = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerPosition);
            var location = CalculateBoxLocation();
            animation.ToValue = NSValue.FromCGRect(new CGRect(location, new CGSize(0, 0)));
            animation.DynamicsMass = DynamicsMass;
            animation.DynamicsTension = DynamicsTension;
            animation.DynamicsFriction = DynamicsFriction;
            animationView.Layer.AddAnimation(animation, "location");
        }

        void BoxSizeAnimation()
        {
            var animationSize = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerBounds);
            var multiplier = 0.7;

            var size = new CGSize(SizeX * multiplier, SizeY * multiplier);
            animationSize.ToValue = NSValue.FromCGRect(new CGRect(new CGPoint(0, 0), size));
            animationSize.DynamicsMass = DynamicsMass;
            animationSize.DynamicsTension = DynamicsTension;
            animationSize.DynamicsFriction = DynamicsFriction;
            animationView.Layer.AddAnimation(animationSize, "size");
        }

        void InitButtons()
        {
            button1.TouchUpInside += (object sender, EventArgs e) =>
            {
                var boxLocationLength = Enum.GetNames(typeof(BoxLocation)).Length - 1;
                var index = (int)Location < boxLocationLength ? 1 : -(boxLocationLength);
                Location = (BoxLocation)((int)Location + index);
                BoxLocationAnimation();
            };

            button1.TouchDown += (object sender, EventArgs e) =>
            {
                BoxSizeAnimation();
            };
        }

        void InitBox()
        {
            var statusBarHeight = 20;
            animationView.Frame = new CGRect(UIScreen.MainScreen.Bounds.Width - Constants.DefaultBoxEdge, statusBarHeight, SizeX, SizeY);
        }
    }
}
