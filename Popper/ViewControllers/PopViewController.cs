// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Facebook.Pop;
using Foundation;
using UIKit;

namespace Popper
{
    public partial class PopViewController : UIViewController
    {
        enum BoxLocation
        {
            NorthEast,
            SouthEast,
            SouthWest,
            NorthWest
        }

        float SizeX;
        float SizeY;
        BoxLocation Location;

        public PopViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitButtons();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            GetUserDefaults();
        }

        void GetUserDefaults()
        {
            SizeX = NSUserDefaults.StandardUserDefaults.FloatForKey("slider1");
            SizeY = NSUserDefaults.StandardUserDefaults.FloatForKey("slider2");
        }

        CGPoint CalculateBoxLocation()
        {
            var screenWidth = UIScreen.MainScreen.Bounds.Width;
            var screenHeight = UIScreen.MainScreen.Bounds.Height;

            var halfWidth = SizeX / 2;
            var halfHeight = SizeY / 2;
            var tabBarHeight = TabBarController?.TabBar.Bounds.Size.Height ?? 59f;
            switch (Location)
            {
                case BoxLocation.NorthEast:
                    return new CGPoint(screenWidth - halfWidth, halfHeight);
                case BoxLocation.SouthEast:
                    return new CGPoint(screenWidth - halfWidth, screenHeight - halfHeight - tabBarHeight);
                case BoxLocation.SouthWest:
                    return new CGPoint(halfWidth, screenHeight - halfHeight - tabBarHeight);
                case BoxLocation.NorthWest:
                    return new CGPoint(halfWidth, halfHeight);
                default:
                    return new CGPoint(0, 0);
            }
        }

        void BoxAnimation()
        {
            var animationSize = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerBounds);
            var size = new CGSize(SizeX, SizeY);
            animationSize.ToValue = NSValue.FromCGRect(new CGRect(new CGPoint(0, 0), size));
            animationView.Layer.AddAnimation(animationSize, "size");

            var animation = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerPosition);
            var location = CalculateBoxLocation();
            animation.ToValue = NSValue.FromCGRect(new CGRect(location, new CGSize(0, 0)));
            animationView.Layer.AddAnimation(animation, "location");
        }

        void InitButtons()
        {
            button1.TouchUpInside += (object sender, EventArgs e) =>
            {
                var boxLocationLength = Enum.GetNames(typeof(BoxLocation)).Length - 1;
                var index = (int)Location < boxLocationLength ? 1 : -(boxLocationLength);
                Location = (BoxLocation)((int)Location + index);
                BoxAnimation();
            };
        }
    }
}
