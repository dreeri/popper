// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using Facebook.Pop;
using Foundation;
using Popper.Utilities;
using UIKit;

namespace Popper
{
    public partial class DecayViewController : UIViewController
    {
        CGRect BoxFrame;

        float DynamicsMass;
        float DynamicsTension;
        float DynamicsFriction;

        UIPanGestureRecognizer PanRecognizer;

        public DecayViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitPanGestureRecognizer();
            InitBox();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            GetUserDefaults();
            ResetPosition();
        }

        void GetUserDefaults()
        {
            DynamicsMass = NSUserDefaults.StandardUserDefaults.FloatForKey("slider1");
            DynamicsTension = NSUserDefaults.StandardUserDefaults.FloatForKey("slider2");
            DynamicsFriction = NSUserDefaults.StandardUserDefaults.FloatForKey("slider3");

            var minimumDynamicValue = 1f;
            DynamicsMass = DynamicsMass < minimumDynamicValue ? Constants.DefaultPopDynamicsMass : DynamicsMass;
            DynamicsTension = DynamicsTension < minimumDynamicValue ? Constants.DefaultPopDynamicsTension : DynamicsTension;
            DynamicsFriction = DynamicsFriction < minimumDynamicValue ? Constants.DefaultPopDynamicsFriction : DynamicsFriction;
        }

        void ResetPosition()
        {
            var animation = POPSpringAnimation.AnimationWithPropertyNamed(POPAnimation.LayerPosition);
            var location = new CGPoint(BoxFrame.X + Constants.DefaultBoxEdge / 2, BoxFrame.Y + Constants.DefaultBoxEdge / 2);
            animation.ToValue = NSValue.FromCGPoint(location);
            animation.DynamicsMass = DynamicsMass;
            animation.DynamicsTension = DynamicsTension;
            animation.DynamicsFriction = DynamicsFriction;
            animationView.Layer.AddAnimation(animation, "location");
        }

        void AnimationViewDragged(UIPanGestureRecognizer recognizer)
        {
            if (recognizer.State == UIGestureRecognizerState.Began || recognizer.State == UIGestureRecognizerState.Changed)
            {
                var yTranslation = recognizer.TranslationInView(View).Y;
                var animation = POPDecayAnimation.AnimationWithPropertyNamed(POPAnimation.LayerPositionY);
                animation.Velocity = NSObject.FromObject(yTranslation);
                animation.CompletionAction = (arg1, arg2) =>
                {
                    ResetPosition();
                };
                animationView.Layer.AddAnimation(animation, "slide");
            }
        }

        void InitPanGestureRecognizer()
        {
            PanRecognizer = new UIPanGestureRecognizer(recognizer => AnimationViewDragged(recognizer));
            View.AddGestureRecognizer(PanRecognizer);
        }

        void InitBox()
        {
            animationView.Frame = new CGRect(new CGPoint(View.Frame.GetMidX() - Constants.DefaultBoxEdge / 2, View.Frame.GetMidY() - Constants.DefaultBoxEdge / 2), new CGSize(Constants.DefaultBoxEdge, Constants.DefaultBoxEdge));
            BoxFrame = animationView.Frame;
        }
    }
}
